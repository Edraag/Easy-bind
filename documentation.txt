
  ---------- EASY-BIND - Easy local binding for Common Lisp ----------


 Version 1.1
 Copyright (C) Marius Gaarde 2018. All rights reserved. Licensed under the MIT license.

 THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
 BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 


------- OVERVIEW -------

Easy-bind is a collection of macros that make the binding of local variables, functions and macros 
in Common Lisp more convenient. It adopts the "paren-free" equational syntax for binding local 
variables from the loop facility, and generalizes it to a simple domain-specific language for local 
binding. It provides a facility for easily defining new binding forms that use a similar paren-
reduced syntax.

Easy-bind is available from Quicklisp: (ql:quickload :easy-bind)

Note that the version available on Quicklisp as of December 2018 does not recognize the letval
macro - multi-let must be used instead (it is identical except for the name). It also does not
recognize the :all or :sym keywords in let+/with forms, or the `being' synonym for the equals
sign in with forms. Finally, it does not include the define-binding-form macro for easily defining
new binding forms.

All names belong to the package edraag.easy-bind, which has nicknames easy-bind and eb. To use the
provided binding forms, after loading Easy-bind either do (use-package :easy-bind) or prefix each
name with eb:<name>.

------- BINDING CONSTRUCTS -------

Easy-bind provides the macros let+, with, let-, letval, letfun, letfun-, letmatch, letmacro and
letsym for binding local variables, functions and macros. Let+ and with are the most general forms,
which can be used to bind local variables, functions and macros within a single form. It also
provides the macro define-binding-form for defining new binding constructs which follow the outline
of the provided forms.

Example usage can be seen in the files example-code.lisp and easy-bind-test.lisp.

Easy-Bind's binding constructs adopt the syntax of local bindings used in Common Lisp's loop 
facility. These bindings have two basic forms:

	   <symbol> = <expr>
	   <list>   = <expr>
	
where the first form ("simple binding") binds a single variable to the value of <expr>, while the 
second form ("complex binding") destructures a list structure and binds a list of variables. 
Example:

     (loop for j below 1 with x = 5
     	   	         and (y . z) = '(1 2 3) do
	   	    (format t "x = ~d y = ~d z = ~d~%" x y z))
		    
prints "x = 5 y = 1 z = (2 3)". Easy-bind adopts the two basic forms "simple-binding" and 
"complex-binding" using the equals sign as separator between left and right hand sides of the 
bindings. As in loop, := and = are synonyms. Easy-bind does not use any of the other "syntactic
keywords" used in the loop facility, such as `and' or `do'.

The body of the binding form begins after the right-hand side of the last binding pair and always
contains an "implicit progn", i.e. forms will be evaluated in sequence and the value of the last
form in the body will be returned as the value of the binding form.

The general form of each binding form is:

    (<form-name> <symbol | list> = <expr>
                 ...
		 <symbol | list> = <expr>
		 <body-form-1>
		 ...
		 <body-form-n>)
		 
where <symbol | list> indicates either a symbol or a list.

The binding constructs let+, with, letval, letfun and letmacro allow the free intermixing of simple
and complex bindings. When only given simple bindings they macroexpand into a single let* form. 
When given no bindings, they expand into a progn. They differ in their interpretation of complex 
bindings.

--- The individual forms ---

LET+ combines the functionality of let* and destructuring-bind. It can also bind local functions
and macros and multiple return values if certain keywords are used in the car position of complex
binding lists. It can be used as a general form for binding local variables, functions and macros.
It expands into let* and destructuring-bind forms, where let* forms are nested only as needed to
preserve order of evaluation, and optionally into (possibly nested) labels, macrolet, symbol-
macrolet and multiple-value-bind forms.

    (let+ (x y z) = '(1 2 3)
          u = (+ x y)
          v = (+ y z)
          ((a) b c) = (list (list u) v (* u v)) 
          (print a)
          (print b)
          (print c))

macroexpands into:

    (DESTRUCTURING-BIND
        (X Y Z)
        '(1 2 3)
      (LET* ((U (+ X Y)) (V (+ Y Z)))
        (DESTRUCTURING-BIND
            ((A) B C)
            (LIST (LIST U) V (* U V))
          (PRINT A)
          (PRINT B)
          (PRINT C))))

and prints 3, 5 and 15. The left-hand-side of a complex binding allows everything destructuring-bind
allows, such as &optional, &rest etc. 

The keywords :val, :fun and :macro enable the binding of multiple return values, local functions
and local macros, respectively:

    (let+ x = 9
          (:fun fac n) = (if (zerop n)
	                     1
			     (* n (fac (- n 1))))
          (:val a b) = (values 1 2)
          (:macro square x) =
	         (let+ g = (gensym)
		   `(let+ ,g = ,x
		     (* ,g ,g)))
          (fac (square (+ x a b))))

    (let+ (:fun qsort list) = 
            (when list
              (with (p . xs) = list
                    (:fun filter x) = (> x p)
                    (nconc (qsort (remove-if #'filter xs))
                           (list p)
                           (qsort (remove-if-not #'filter xs)))))
          (qsort *a*))

The syntax for function and macro definitions is similar to Scheme's `define' and other functional 
languages in that the formal parameters simply follow the name of the function/macro (the lambda
list is the rest of the list following the name). &rest, &optional, &key etc. arguments can be used
as in labels or macrolet.

If function bindings appear in sequence without any non-function bindings in between, they are
collected into a single labels form. This means that mutually recursive functions can be defined:

    (let+ x = 9
          y = 5
          (:fun is-even n) = (if (zerop n) t
				 (is-odd (- n 1)))
          (:fun is-odd n)  = (if (zerop n) nil
				 (is-even (- n 1)))
          (and (is-odd x)
               (not (is-even y))))

Similarly, a sequence of macro bindings will be collected into a single macrolet form.

Like with letfun and letmacro, functions and macros bound with let+ obtain an "implicit progn" by
sequencing forms in the right-hand side of the binding in a surrounding list. See under LETFUN 
below.

The :all keyword can be used to bind several variables to the same value:

    (let+ (:all x y z) = 0
      (list x y z))

will return (0 0 0). This is similar to writing x = y = z = 0 in Python. The right-hand side will
only be evaluated once.

The :sym keyword can be used to bind symbol-macros. If there is more than one symbol following the
:sym keyword in the left-hand list, the right-hand side must be an unquoted list literal, and the
symbols in the left-hand side will be bound to the corresponding expression in the right-hand list:

    (let+
      (:sym sum avg) = ((+ a b)
                        (/ sum 2))
      (+ sum avg))

If there is only one symbol, the right-hand side must be a single expression:

    (let+ (:sym message) = (format t "Printing the message!~%"))

Beware that symbol-macros merely give a name to the corresponding expression, they are not 
variables. This means the expression will be evaluated everywhere the symbol occurs in the code.

The forms letval, letfun and letmacro are equivalent to let+ with an "implicit keyword" :val, :fun
or :macro, respectively, in the complex binding lists. Thus the following pairs of forms are
equivalent:

    (eb:let+ (:val q r) = (truncate 13 4) (list q r))
    (eb:letval (q r) = (truncate 13 4) (list q r))
    
    (eb:let+ (:fun 2+ x) = (+ x 2) x = 3 (2+ x))
    (eb:letfun (2+ x) = (+ x 2) x = 3 (2+ x))
    
Note that the left-hand side of a function definition is similar in form to an application of the
same function (modulo keyword) - as it should for the equals sign to imply "is the same as". 

WITH is similar to let+, and is thus similar to the `with' keyword in the loop facility, except for
the additional functionality described above and that it binds in series rather than in 
parallel.

Using Easy-bind, the following forms are equivalent:

    (loop with list = '((1 3) (4 3) (2 4) (5 3) (5 6) (3 1))
          for (a b) in list collect (+ a b))
       
    (with list = '((1 3) (4 3) (2 4) (5 3) (5 6) (3 1))
          (loop for (a b) in list collect (+ a b)))

The pair with ... being, where `being' is a synonym for the equals sign recognized in with forms,
can be used to signal (to the human reader) that the variable will retain its initial value 
throughout the body of the form, or that it will make no sense to mutate it:

    (square x) = (with square being (* x x)
                   (format t "squaring ~a...~%" x)
		   (format t "done! result = ~a~%" square)
		   square)

Similarly when shadowing a special variable:

    (with *verbose* being nil
      (test-easy-bind))

There is no enforcing of immutability though.

LET- only accepts simple bindings and expands into a single let form. It differs from let+ in that
it, like let, binds multiple variables in parallel:

    (with x = 9 y = 5
	(let- x = y
	      y = x
	  (format t "x = ~a, y = ~a~%" x y)))
	  
prints "x = 5, y = 9".

LETVAL works like let+ except that complex bindings are used to bind multiple values rather than
destructuring, and that it does not accept keywords. It is similar to Racket's `let-values'.

    (letval (a b) = (floor pi)
            p = (+ a b)
            (x y) = (floor (exp 1))
            e = (+ x y)
            (expt e (* p (complex 0 1))))

macroexpands into:

   (MULTIPLE-VALUE-BIND (A B)
       (FLOOR PI)
     (LET* ((P (+ A B)))
       (MULTIPLE-VALUE-BIND (X Y)
           (FLOOR (EXP 1))
         (LET* ((E (+ X Y)))
           (EXPT E (* P (COMPLEX 0 1)))))))

Since left-hand lists are used for binding multiple return values, it can not do destructuring.
Multi-let is a synonym for letval.

LETFUN combines the functionality of let* and labels. It uses left-hand lists to bind local 
functions. If only given complex bindings, it expands into a single labels form. Otherwise let* and
labels forms will be nested as needed to preserve order of evaluation. 

Example:

    (letfun (square x) = (* x x)
	    x = 1
	    y = 2
	    (y n) = (+ n 1)
	    (fact n) = (case n
                         (0 1)
                         (t (* n (fact (1- n)))))
	    n = (+ x y)
	    (fact (square (y n))))

macroexpands into:

    (LABELS ((SQUARE (X)
               (* X X)))
      (LET* ((X 1) (Y 2))
        (LABELS ((Y (N)
                   (+ N 1))
                 (FACT (N)
                   (CASE N (0 1) (T (* N (FACT (1- N)))))))
          (LET* ((N (+ X Y)))
            (FACT (SQUARE (Y N)))))))

Function bodies (right-hand sides) obtain an "implicit progn" by sequencing expressions in a list:

    (letfun 
	(verbose-square x) =
	  ((format t "x = ~a~%" x)
	   (format t "squaring ~a now...~%" x)
	   (format t "soon done squaring ~a...~%" x)
	   (format t "done! result = ~a~%" (* x x)))
	x = 9
	(verbose-square x))

Note that this will obviously not work if the first expression is an atom - the right-hand side
will then be interpreted as a single form. The same applies if the first form is a lambda form.

Any lambda list that can be used with labels can be used:

    (letfun (add &rest args) = (apply #'+ args)
	     x = 7 y = 9
	     (add x y))
	     
Note that mutually recursive functions must not have any variable bindings in between their 
definitions, as this will cause two extra scopes to be nested, so that the first function will not
have access to the second:

    (is-odd n)  = (if (zerop n) nil
		      (is-even (1- n)))
    x = 4 ; Oops, now is-even is invisible to is-odd!
    (is-even n) = (if (zerop n) t
		      (is-odd (1- n)))

It is however ok to have one or more function definitions in between, as these will be collected
into a single labels form.

Letfun (and letmacro) do not accept any of the keywords that let+/with accept, with the exception
of :all to bind several variables to the same value.

LETFUN- only accepts complex bindings and expands into a single flet form. It differs from letfun
in that it binds its local functions in parallel.

LETMACRO works like letfun but expands into let* and macrolet forms. Example:

    (letmacro (square x) =
	         (let+ g = (gensym)
		   `(let+ ,g = ,x
		     (* ,g ,g)))
	    x = 5
	    (square x))
		
macroexpands to:

    (MACROLET ((SQUARE (X)
                 (LET+ G = (GENSYM) `(LET+ ,G = ,X (* ,G ,G)))))
      (LET* ((X 5))
        (SQUARE X)))
	
Any lambda list that can be used by macrolet can be used.

LETSYM expands into a single symbol-macrolet form. Example:

    (letsym x = (format t "Expanded x!~%")
            y = (format t "Expanded y!~%")
	    (sum avg) = ((+ a b)
                         (/ sum 2))
            x y (list sum avg))

Like with the :sym keyword in a let+ form (see above), symbols can be collected in a list. The
right-hand side must then be an unquoted list literal, and the symbols in the left-hand list are
bound to the corresponding expression in the right-hand list.

LETMATCH is a conditional version of let+. It takes a form as its first argument, expected to be a
list form, and matches its structure against the left-hand-sides of its remaining arguments. The
left and right hand sides of the remaining arguments must be separated by a "fat arrow" digraph
(=>). The first left-hand side that matches will be bound to the first argument form in a let+
(expanding into a let* or destructuring-bind), and its right-hand side becomes the body of the let+
form.

    (letmatch '(1 (2 3))
         () => ()
         (x) => (list x)
         (x y) => (list x y)
         (x (y z)) => (list x y z))
	 
returns (1 (2 3)) because (x y) is the first alternative that matches the structure of '(1 (2 3)),
causing x to be bound to 1 and y to be bound to (2 3) before the code (list x y) is executed. If we
remove the (x y) alternative,

    (letmatch '(1 (2 3))
         () => ()
         (x) => (list x)
         (x (y z)) => (list x y z))

returns (1 2 3) because the alternative (x (y z)) was the first match. The rules for matching are:
1) A left-hand side must be a symbol or a literal list containing 0 or more symbols and/or other
lists, where this rule applies recursively for lists, 2) a symbol (except nil) matches anything, 
3) the empty list only matches the empty list, 4) a list matches a list if car matches car and cdr
matches cdr. 

T is a default case which causes its right hand side to be executed without binding variables:

    (letmatch '(1 2 3)
         () => ()
         (x) => (list x)
         t => (print 'hello)
         (x y z) => (list y x z))
	     
will print "hello".

The underscore _ and any symbol whose name begins with same are "wildcards" which are not bound as
variables. They can be repeated in the patterns:

    (letmatch '(1 2 3)
         (x) => x
         (x y) => (values x y)
         (_ z _) => (* z 100))

Letmatch expands into a cond form - the last two forms above expand into

    (COND ((MATCHES 'NIL '(1 2 3)) NIL)
      ((MATCHES '(X) '(1 2 3))
       (LET+ (X) = '(1 2 3) (DECLARE (IGNORE)) (LIST X)))
      (T (PRINT 'HELLO))
      ((MATCHES '(X Y Z) '(1 2 3))
       (LET+ (X Y Z) = '(1 2 3) (DECLARE (IGNORE)) (LIST Y X Z))))
      
    (COND ((MATCHES '(X) '(1 2 3)) (LET+ (X) = '(1 2 3) (DECLARE (IGNORE)) X))
      ((MATCHES '(X Y) '(1 2 3))
       (LET+ (X Y) = '(1 2 3) (DECLARE (IGNORE)) (VALUES X Y)))
      ((MATCHES '(#:|_612| Z #:|_613|) '(1 2 3))
       (LET+ (#:|_612| Z #:|_613|) = '(1 2 3)
             (DECLARE (IGNORE #:|_613| #:|_612|)) (* Z 100))))

where `matches' is a non-exported predicate which implements the simple matching rules. Letmatch 
returns nil if none of the alternatives match.

One possible use case for letmatch is writing recursive functions that operate on lists:

    (qsort list) = (letmatch list
                    () => ()
                    (p . xs) =>
                      (nconc (qsort (remove-if (lambda (x) (> x p)) xs))
			     (list p)
			     (qsort (remove-if-not (lambda (x) (> x p)) xs))))
			       
    (count-list list) = (letmatch list
		         () => 0
		         (_ . tail) => (+ 1 (count-list tail)))
					   
    (last-elt l) = (letmatch l
		      (x . nil) => x
		      (_x . xs) => (last-elt xs))

These are of course slightly inefficient as the check for (x . xs) is redundant (and `matches'
calls itself recursively to check both the car and the cdr). 

As with other forms above, the right-hand sides in a letmatch allow forms to be sequenced in an
enclosing list to obtain an "implicit progn".

    (letmatch list
      ()  => ()
      (x) => ((format t "The list contains a ")
              (format t "single element ")
              (format t "and that element is ~a~%" x))
      t   => ((format t "Contrary to my expectations, ")
              (format t "the list contains more than one element.~%" )))

--- Scope ---

For the "serial" binding forms let+, with, letval, letfun and letmacro every variable binding is
lexically in scope from the point where it is defined until the binding form is closed. In letfun, 
and in let+/with using the :fun keyword, local functions that are defined in sequence without any
variable definitions occurring in between are visible to each other: 

    (letfun (f x) = (+ x 1)
            (letfun (g x) = (- (f x) 1)
                    (f x) = (* x 100)
                    (g 3)))

returns 299, not 3. The following form, however, returns 3:

    (letfun (f x) = (+ x 1)
            (letfun (g x) = (- (f x) 1)
                    x = 3
                    (f x) = (* x 100)
                    (g x)))
   
because the inner f is not visible to g due to the nesting of labels and let* forms in the 
expansion.

For local macros defined with letmacro or the :macro keyword in let+/with (as with macrolet which
they expand into), results are undefined if they reference any bindings defined within the local
scope. See http://www.lispworks.com/documentation/HyperSpec/Body/s_flet_.htm

Binding expressions in the "serial" binding forms can otherwise always refer to variables bound
above them within the binding form.

Let- and letfun- bind in parallel, and the bindings are only in scope inside the body of the form. 

For letmatch, the scope is restricted to the associated conditional branch.

Binding expressions can only occur before the body of the form.

Note regarding variable scope: Unlike in a `letrec' form in Scheme or other functional languages,
the following will not work:

    (let+ fact =
	(lambda (n)
	   (if (= n 0)
	   1
	   (* n (funcall fact (- n 1)))))
      (funcall fact 4))

because the variable fact is not defined until after the binding expression is closed. Letfun or
the :fun keyword in a let+/with form must be used to write local recursive functions.

Note on declarations: Due to the fact that macroexpansion may create nested scopes, if the body
contains a declaration pertaining to variables bound in a complex binding, this complex binding 
should appear last in the series of bindings. If the declaration pertains to variables bound in
simple bindings, these should appear after the last complex binding.

--- Defining new binding constructs ---

The binding forms described above, with the exception of letmatch, are defined with the macro
define-binding-form. For example, the definition for let+ is:

    (define-binding-form let+ 
      :left-hand-pred #'simple-or-complex-left-hand-side-p 
      :separator-pred #'equals-sign-p
      :form-generator #'generate-let+-expansion)

As can be seen, all that needs to be provided is a name and three functions: a predicate for 
determining what forms are allowed as left-hand sides, a predicate for determining what is to be
considered as separator between left and right hand sides, and a function for generating code from
the resulting binding pairs and body. The macro will expand into a defmacro form which creates a 
macro with a variadic lambda list: (DEFMACRO LET+ (&REST FORMS) ...)

Given the two predicates, the generated macro will provide from its argument list two new lists:
a list of binding pairs ((a1 b1) ... (an bn)) and a body consisting of the code that follows the
last binding right-hand side in the argument list. The form-generator function must be a function
of two arguments, the binding list and the body. As an example, consider the definition of the
simplest binding form, let-:
    
    (define-binding-form let-
      :left-hand-pred #'simple-left-hand-side-p 
      :separator-pred #'equals-sign-p
      :form-generator (lambda (bindings body) `(let ,bindings ,@body)))
      
As let- is simply syntactic sugar for let, the form-generator function just returns a single let
form. To understand how it works, consider a simple form like the following:

    (let- x = 9
          y = 8
	  (format t "x = ~a, y = ~a~%" x y)
	  (+ x y))

The predicate simple-left-hand-side-p only recognizes symbols as left-hand sides in bindings, while
equals-sign-p recognizes the symbols = and := as separator. When parsing the above form, let- will
thus generate the binding list ((x 9) (y 8)) and the body 
((format t "x = ~a, y = ~a~%" x y) (+ x y)), resulting in the final macro expansion:

    (LET ((X 9) (Y 8))
      (FORMAT T "x = ~a, y = ~a~%" X Y)
      (+ X Y))

--- Emacs ---

To have the Easy-bind binding forms syntax-highlighted as "keywords" in Emacs, add the
following form to your .emacs:

    (font-lock-add-keywords 'lisp-mode
			'(("\\_<let\\+\\_>" . font-lock-keyword-face)
			  ("\\_<let\\-\\_>" . font-lock-keyword-face)
			  ("\\_<with\\_>" . font-lock-keyword-face)
			  ("\\_<letsym\\_>" . font-lock-keyword-face)
			  ("\\_<letval\\_>" . font-lock-keyword-face)
			  ("\\_<letmacro\\_>" . font-lock-keyword-face)
			  ("\\_<letfun\\_>" . font-lock-keyword-face)
			  ("\\_<letfun\\-\\_>" . font-lock-keyword-face)
			  ("\\_<letmatch\\_>" . font-lock-keyword-face)
			  ("\\_<multi\\-let\\_>" . font-lock-keyword-face)))
			  
